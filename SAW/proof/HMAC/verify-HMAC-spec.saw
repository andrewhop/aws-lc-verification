/* 
 * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * SPDX-License-Identifier: Apache-2.0
*/

// Include HMAC helper functions.
include "HMAC-common.saw";

// Specification of the HMAC function
let HMAC_spec withLength key_len data_len = do {
  // Precondition: The function uses the AVX+shrd code path
  global_alloc_init "OPENSSL_ia32cap_P" {{ ia32cap }};

  // Precondition: `type_ptr` is a pointer to a const `env_md_ctx_st` struct
  // satisfying the `points_to_env_md_st` specification
  type_ptr <- crucible_alloc_readonly (llvm_struct "struct.env_md_st");
  points_to_env_md_st type_ptr;

  // Precondition: `key` is a fresh const array of `key_len` bytes, and
  // `key_ptr` points to `key`
  (key, key_ptr) <- ptr_to_fresh_readonly "key" (llvm_array key_len i8);

  // Precondition: `data` is a fresh const array of `data_len` bytes, and
  // `data_ptr` points to `data`.
  (data, data_ptr) <- ptr_to_fresh_readonly "data" (llvm_array data_len i8);

  // Precondition: md_out_ptr is allocated and correct length, and 
  // md_out_len_ptr is null or points to an int.
  (md_out_ptr, md_out_len_ptr) <- digestOut_pre withLength;

  // Call function with arguments `type_ptr`, `key_ptr`, `key_len`, `data_ptr`,
  // `data_len`, `md_out_ptr`, and `md_out_len_ptr`
  crucible_execute_func
    [ type_ptr
    , key_ptr
    , crucible_term {{ `key_len : [64] }}
    , data_ptr
    , crucible_term {{ `data_len : [64] }}
    , md_out_ptr
    , md_out_len_ptr
    ];

  // Postcondition: The function has not changed the variable that decides the AVX+shrd code path
  global_points_to "OPENSSL_ia32cap_P" {{ ia32cap }};

  // Postcondition: The contents of the array pointed to by `md_out_ptr` match
  // the result returned by the HMACFinal cryptol spec.
  // If length output is used, md_out_len_ptr points to correct length
  digestOut_post withLength md_out_ptr md_out_len_ptr (crucible_term {{ HMAC key data }});
  
  // Postcondition: The function returns `md_out_ptr`
  crucible_return md_out_ptr;
};

// Size of the hmac_ctx_st struct
let HMAC_CTX_SIZE = llvm_sizeof m (llvm_struct "struct.hmac_ctx_st");

// Assume `OPENSSL_cleanse` satisfies `OPENSSL_cleanse_spec` for the
// hmac_ctx_st struct
OPENSSL_cleanse_hmac_ov <- crucible_llvm_unsafe_assume_spec
  m
  "OPENSSL_cleanse"
  (OPENSSL_cleanse_spec HMAC_CTX_SIZE);

let verify_hmac_with_length withLength = do {
  // Verify the `HMAC` C function satisfies the `HMAC_spec` specification
  crucible_llvm_verify m "HMAC"
    [ sha512_block_data_order_spec
    , OPENSSL_malloc_ov
    , OPENSSL_free_nonnull_ov
    , OPENSSL_free_null_ov
    , OPENSSL_cleanse_ov
    , OPENSSL_cleanse_hmac_ov
    ]
    true
    (HMAC_spec withLength 240 240)
    (w4_unint_yices ["processBlock_Common"]);
};
for [false, true] verify_hmac_with_length;
